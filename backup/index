// washerPanel-dashboard.js
document.addEventListener('DOMContentLoaded', function() {
    // Base API URL
    const BASE_URL = 'http://localhost:8000/api';
    
    // DOM Elements
    const availabilityToggle = document.getElementById('availabilityToggle');
    const refreshButton = document.getElementById('refreshButton');
    const daySelector = document.getElementById('daySelector');
    const servicesContainer = document.getElementById('servicesContainer');
    const withdrawButton = document.getElementById('submitWithdraw');
    const withdrawAmount = document.getElementById('withdrawAmount');
    const availableBalance = document.getElementById('availableBalance');
    const washerBalance = document.getElementById('washerBalance');
    
    // Stats elements
    const todayServicesElement = document.getElementById('todayServices');
    const weeklyCarsElement = document.getElementById('weeklyCars');
    const averageRatingElement = document.getElementById('averageRating');
    const completedServicesElement = document.getElementById('completedServices');
    
    // Initialize the dashboard
    initDashboard();
    
    // Event Listeners
    availabilityToggle.addEventListener('change', toggleAvailability);
    refreshButton.addEventListener('click', initDashboard);
    daySelector.addEventListener('change', loadServices);
    withdrawButton.addEventListener('click', submitWithdrawal);
    
    // Initialize modal with current balance
    $('#withdrawModal').on('show.bs.modal', function() {
        updateAvailableBalance();
    });
    
    // Functions
    function initDashboard() {
        // Show loading state
        showLoading();
        
        // Fetch all dashboard data
        Promise.all([
            fetchDashboardStats(),
            loadServices(),
            fetchWasherBalance()
        ]).catch(error => {
            console.error('Error initializing dashboard:', error);
            showError('Failed to load dashboard data. Please try again.');
        });
    }
    
    async function fetchDashboardStats() {
    const token = localStorage.getItem("token");

    try {
        const server_response = await fetch(`${BASE_URL}/washer/dashboard/stats`, {
            method: "GET",
            headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
            }
        });

        const data = await server_response.json();

        if (data.success==false) {
            alert(data.message || "Failed to load dashboard data.");
            return;
        }

        // Update dashboard stats
        updateElements('#todayServices', el => el.textContent = data.today_services || 0);
        updateElements('#weeklyCars', el => el.textContent = data.weekly_cars || 0);
        updateElements('#averageRating', el => el.textContent = data.average_rating ? data.average_rating.toFixed(1) : 0);
        updateElements('#completedServices', el => el.textContent = data.completed_services || 0);

      /*  // Update next payout date if available
        if (data.next_payout_date) {
            updateElements('#nextPayoutDate', el => el.textContent = formatDate(data.next_payout_date));
        }

        */

    } catch (error) {
        console.log("Error fetching dashboard stats:", error);
        alert("Error fetching dashboard stats. Please try again later. "+error);
    }

    function updateElements(selector, updateFn) {
        document.querySelectorAll(selector).forEach(el => updateFn(el));
    }
}

    async function fetchWasherBalance() {
    const token = localStorage.getItem("token");

    try {
        const server_response = await fetch(`${BASE_URL}/washer/balance`, {
            method: "GET",
            headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
            }
        });

        const data = await server_response.json();

        if (!data.success) {
            alert(data.message || "Failed to load washer balance.");
            return;
        }

        updateElements('#washerBalance', el => el.textContent = `Ksh ${data.balance || 0}`);
        
    } catch (error) {
        console.error("Error fetching washer balance:", error);
        alert("Error fetching washer balance. Please try again later.");
    }

    function updateElements(selector, updateFn) {
        document.querySelectorAll(selector).forEach(el => updateFn(el));
    }
}

    
    function loadServices() {
        const timeframe = daySelector.value;
        let url = `${BASE_URL}/bookings`;
        
        // Adjust URL based on selected timeframe
        switch(timeframe) {
            case 'today':
                url += '/today';
                break;
            case 'tomorrow':
                url += '/tomorrow';
                break;
            case 'next7days':
                url += '/week';
                break;
        }

        return async function fetchBookings(url) {
    const token = localStorage.getItem("token");

    try {
        const response = await fetch(url, {
            method: "GET",
            headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
            }
        });

        const bookings = await response.json();

        console.log(bookings)

        if (!response.ok || !bookings.success) {
            throw new Error(bookings.message || "Failed to load bookings.");
        }

        renderBookings(bookings);
        
    } catch (error) {
        console.error('Error fetching bookings:', error);
        servicesContainer.innerHTML = `
            <div class="alert alert-danger">
                Failed to load services. Please try again.
            </div>
        `;
    }
}













        /*
        return fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(bookings => {
                renderBookings(bookings);
            })
            .catch(error => {
                console.error('Error fetching bookings:', error);
                servicesContainer.innerHTML = `
                    <div class="alert alert-danger">
                        Failed to load services. Please try again.
                    </div>
                `;
                throw error;
            });*/
    }
    
    function renderBookings(bookings) {
        if (!bookings || bookings.length === 0) {
            servicesContainer.innerHTML = `
                <div class="text-center py-5">
                    <div style="font-size: 3rem;">ðŸ“­</div>
                    <p class="mt-3">No bookings found</p>
                </div>
            `;
            return;
        }
        
        let html = '';
        
        // Group bookings by status for better organization
        const groupedBookings = {
            active: [],
            completed: [],
            cancelled: []
        };
        
        bookings.forEach(booking => {
            if (booking.status === 'completed') {
                groupedBookings.completed.push(booking);
            } else if (booking.status === 'cancelled') {
                groupedBookings.cancelled.push(booking);
            } else {
                groupedBookings.active.push(booking);
            }
        });
        
        // Render active bookings first
        if (groupedBookings.active.length > 0) {
            html += `<h6 class="mb-3 text-primary">Active Services (${groupedBookings.active.length})</h6>`;
            groupedBookings.active.forEach(booking => {
                html += createBookingCard(booking);
            });
        }
        
        // Render upcoming bookings
        if (groupedBookings.completed.length > 0) {
            html += `<h6 class="mb-3 mt-4 text-success">Completed Services (${groupedBookings.completed.length})</h6>`;
            groupedBookings.completed.forEach(booking => {
                html += createBookingCard(booking);
            });
        }
        
        // Render cancelled bookings
        if (groupedBookings.cancelled.length > 0) {
            html += `<h6 class="mb-3 mt-4 text-danger">Cancelled Services (${groupedBookings.cancelled.length})</h6>`;
            groupedBookings.cancelled.forEach(booking => {
                html += createBookingCard(booking);
            });
        }
        
        servicesContainer.innerHTML = html;
        
        // Add event listeners to all complete buttons
        document.querySelectorAll('.complete-btn').forEach(button => {
            button.addEventListener('click', function() {
                const bookingId = this.getAttribute('data-booking-id');
                markBookingComplete(bookingId);
            });
        });
    }
    
    function createBookingCard(booking) {
        const formattedDate = formatDate(booking.time);
        const statusClass = getStatusClass(booking.status);
        
        return `
            <div class="service-detail-card mb-3">
                <div class="service-header">
                    ${booking.client.imageUrl ? 
                        `<img src="${booking.client.imageUrl}" alt="Client" class="car-image">` : 
                        `<div class="car-image bg-secondary text-white d-flex align-items-center justify-content-center">
                            <i class="fas fa-user"></i>
                        </div>`
                    }
                    <div class="flex-grow-1">
                        <div class="car-model">${booking.client.name || 'Client'}</div>
                        <small class="text-muted">${formattedDate}</small>
                    </div>
                    <span class="badge ${statusClass}">${booking.status}</span>
                </div>
                <div class="service-details">
                    <div class="detail-item">
                        <span class="detail-label"><i class="fas fa-car me-2"></i> Vehicle</span>
                        <span class="detail-value">${booking.vehicle.make} ${booking.vehicle.model}</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label"><i class="fas fa-sparkles me-2"></i> Service</span>
                        <span class="detail-value">${booking.service.name}</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label"><i class="fas fa-money-bill-wave me-2"></i> Amount</span>
                        <span class="detail-value">Ksh ${booking.service.price}</span>
                    </div>
                    ${booking.status === 'active' ? `
                    <div class="d-grid mt-2">
                        <button class="btn btn-sm btn-success complete-btn" data-booking-id="${booking.id}">
                            <i class="fas fa-check me-1"></i> Mark Complete
                        </button>
                    </div>
                    ` : ''}
                </div>
            </div>
        `;
    }
    
    function getStatusClass(status) {
        switch(status.toLowerCase()) {
            case 'completed':
                return 'bg-success bg-opacity-10 text-success';
            case 'cancelled':
                return 'bg-danger bg-opacity-10 text-danger';
            case 'active':
                return 'bg-primary bg-opacity-10 text-primary';
            default:
                return 'bg-secondary bg-opacity-10 text-secondary';
        }
    }
    
   async function markBookingComplete(bookingId) {
    const token = localStorage.getItem("token");

    try {
        const response = await fetch(`${BASE_URL}/mark/complete`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ id: bookingId })
        });

        const data = await response.json();

        if (!response.ok || !data.success) {
            createToast(data.message || 'Failed to mark booking as complete', 'error');
        }

        // Refresh the services list, stats, and balance
        loadServices();
        fetchDashboardStats();
        fetchWasherBalance();

    } catch (error) {
        console.error('Error completing booking:', error);
        createToast('Failed to mark booking as complete. Please try again.', "error");
    }
}

    function toggleAvailability() {
        const isAvailable = availabilityToggle.checked;
        
        fetch(`${BASE_URL}/washer/availability`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ available: isAvailable })
        })
        .then(response => {
            if (!response.ok) {
                createToast('Failed to update availability', 'error');
            }
            return response.json();
        })
        .then(data => {
            // Optional: Show a success message
            console.log('Availability updated:', data);
        })
        .catch(error => {
            console.error('Error updating availability:', error);
            // Revert the toggle if the request failed
            availabilityToggle.checked = !isAvailable;
            createToast('Failed to update availability. Please try again.', 'error');
        });
    }










    
    function submitWithdrawal() {
        const amount = parseFloat(withdrawAmount.value);
        const method = document.getElementById('withdrawMethod').value;
        
        if (!amount || amount <= 0) {
            alert('Please enter a valid amount');
            return;
        }
        
        if (!method) {
            alert('Please select a withdrawal method');
            return;
        }
        
        fetch(`${BASE_URL}/withdraw`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ amount, method })
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(err => { throw new Error(err.message || 'Withdrawal failed'); });
            }
            return response.json();
        })
        .then(data => {
            // Close the modal
            $('#withdrawModal').modal('hide');
            
            // Show success message
            alert('Withdrawal request submitted successfully!');
            
            // Refresh balance
            fetchWasherBalance();
            
            // Reset form
            document.getElementById('withdrawForm').reset();
        })
        .catch(error => {
            console.error('Error submitting withdrawal:', error);
            alert(error.message || 'Failed to submit withdrawal. Please try again.');
        });
    }
    
    function formatDate(timestamp) {
        const date = new Date(timestamp);
        const options = { weekday: 'short', day: 'numeric', month: 'short', year: 'numeric' };
        return date.toLocaleDateString('en-US', options);
    }
    
    function showLoading() {
        servicesContainer.innerHTML = `
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading services...</p>
            </div>
        `;
    }
    
    function showError(message) {
        servicesContainer.innerHTML = `
            <div class="alert alert-danger">
                ${message}
            </div>
        `;
    }
});